* Owt

Serve up owt yer fancy on t'fly.

** What's This?

A Flask app exposing an endpoint whose request handling behaviour is configured by the request itself.

For example, start by launching ~owt~:

#+BEGIN_SRC
$ owt

Owt serving on 0.0.0.0:9876
#+END_SRC

Now you can run any behaviour (as long as the imports are available in ~owt~'s ~$PYTHONPATH~ - for this ~owt~ can be started inside a virtualenv, after installing a package globally, or just from within a project directory) via a thin Python adaptor:

#+BEGIN_SRC python
# fancy_ai_adaptor.py (wrap once, call from anywhere)

from big.research.lab import fancy_ai

def run(_, prompt):
    return fancy_ai.do_something(prompt)
#+END_SRC

Which can be called from any language with a tiny client:

#+BEGIN_SRC javascript
// client.js

const url = owtify(url, 'adaptor.py', {'prompt': 'output SOTA results'});
const response = await fetch(url, {});
#+END_SRC

The client-free version isn't very complex either:

#+BEGIN_SRC bash
curl -G \
  --data-urlencode code_b64=$(cat adaptor.py | base64 -w 0) \
  --data-urlencode kwargs_b64=$(echo "{'prompt':'output SOTA results'}") \
  http://localhost:9876
#+END_SRC


*** Security
*This works by evaluating arbitrary user-supplied strings as code. This is grossly insecure by its very nature; don't expose it to the internet!*

There's support for basic auth via ~--auth="username:sha256(password)"~ but still, exercise caution. It would not be difficult to accidentally make an ~owt~ API call that irreversibly destroyed your own machine.

*** Why?

The primary motivation is rapid prototyping against new machine learning models from languages other than Python. So often the newest hotness drops with a checkpoint and a Python client, and using this outside of the specific ecosystem in which it is designed to run means one of:

1. FFI-wrapping the library to get native-looking calls in your language (or use an embedded Python if your language has it)
   - Painful and bespoke-to-each-new-library work to figure out how to make all necessary requirements, virtualenv setup, CUDA flags, etc available.
   - Or, now your software only works inside a virtualenv.
2. Spawn ~python some_project.py --flag=...~" as a child process
   - Handle communication over stdin/out/err can be a pain.
3. Docker-ify it
   - Long; CUDA can be annoying; still need to expose the logic by one of the other methods.
4. Building a lightweight API backend exposing the Python logic and writing client code in your language of choice
   - Annoying boilerplate; the time between "I can run the Python on my machine" and "I have some native Haskell code doing the same~ can be >1h.
   - Either one new service for every new library you want to test out, or now you need to maintain a growing monolith of unrelated endpoints

~owt~ aims to make #4 less painful, at the cost of security and sanity, by providing a single service capable of serving arbitrary new logic without requiring changes to ~owt~ itself.

*** How?
The cost of supporting some new system is pushed to the client, who must send adaptor code (a request handler, essentially) along with the request. This creates a virtual endpoint on the fly, giving complete control over the serving logic to the API user.

Writing the adaptor code is a one-time cost for each new virtual endpoint, made cheaper by having access to ~owt.summat~, a collection of composable building blocks.

*** Examples

The following examples (in ~example/~) could all be run one-by-one without any need to restart or rebuild ~owt~. The first one is shown a few different ways to give a flavour of usage. Subsequent examples just show ~curl~ in tandem with an adaptor ~.py~ file, but it's easy to see how one could extend from here to call to ~owt~ from any other language.

**** Echo Server
By default, the function named ~run(request, **kwargs)~ in the user-supplied code will be used to handle the request.
Code and (optionally) arguments are supplied as ~code_b64~ and ~kwargs_b64~. ~kwargs_b64~ is ~eval~'d to get the resulting dictionary, so can itself contain richer logic to build up arguments.

***** As a self-contained shell script
#+INCLUDE: "example/echo/echo_script.sh" src bash

#+BEGIN_SRC bash :exports both :results html
./example/echo/echo_script.sh http://localhost:9876
#+END_SRC

#+RESULTS:
#+begin_export html
Hello, owt!
#+end_export

***** As a Python file + script
#+INCLUDE: "example/echo/echo.py" src python

Passing data via POST JSON ~kwargs~:

#+INCLUDE: "example/echo/echo_kwargs.sh" src bash

#+BEGIN_SRC bash :exports both :results html
./example/echo/echo_kwargs.sh http://localhost:9876
#+END_SRC

#+RESULTS:
#+begin_export html
Hello, owt!
#+end_export

Passing data via GET in the path:

#+INCLUDE: "example/echo/echo_request.sh" src bash

#+BEGIN_SRC bash :exports both :results html
./example/echo/echo_request.sh http://localhost:9876
#+END_SRC

#+RESULTS:
#+begin_export html
Hello, owt!
#+end_export

**** Text to Speech API
A more complex example demonstrating wrapping Suno's OSS TTS model (https://github.com/suno-ai/bark)[Bark].

The client provides an adaptor that responds with a stream of bytes, allowing the generated audio to be streamed in chunks, sentence-by-sentence.

Responses are cached for the lifetime of the ~owt~ server for each combination of ~(text, speaker)~.

The ~preload_models()~ call makes the first call take a while as VRAM is populated, but the weights remain in memory so subsequent calls are cheaper.

To avoid this breaking other ~owt~ uses, one can spin up multiple instances of ~owt~, each handling a different kind of task and with different resource profiles.

***** Python Adaptor
The endpoint logic, to be base64-encoded as part of the request.
#+INCLUDE: "example/bark/bark.py" src python

***** Save audio via cURL
Bundle the endpoint logic with a prompt and download the resulting audio.
#+INCLUDE: "example/bark/bark.sh" src bash

***** Stream audio via JS
Use an endpoint from a webapp - see ~example/bark/bark.html~ for usage.
#+INCLUDE: "example/bark/bark.js" src javascript

***** Ad-hoc Web Server
In fact we can go one step further now and bootstrap our own webserver within ~owt~ to serve our prototype app.

We ca create an adhoc endpoint that serves us the rendered ~bark.html~ Jinja2 template.

The ~owt~ arguments can be passed as GET query parameters as well as POST JSON data, so we can actually write a handler that embeds the entire HTML into the query with this Python-in-Python-in-Bash curiosity.

#+INCLUDE: "example/bark/bark_construct_curl.sh" src bash

#+BEGIN_SRC bash :exports both :results html
bash -c "$(./example/bark/bark_construct_curl.sh http://localhost:9876) -s -o /dev/null -w '%{url}'"
#+END_SRC

#+RESULTS:
#+begin_export html
http://localhost:9876/?code_b64=CmRlZiBydW4oXyk6CiAgZnJvbSBmbGFzayBpbXBvcnQgcmVuZGVyX3RlbXBsYXRlCiAgdHJ5OgogICAgICByZW5kZXJfdGVtcGxhdGUoJycnPCFkb2N0eXBlIGh0bWw%2bCjxodG1sPgogIDxoZWFkPgogICAgPHRpdGxlPmJhcmsgdGVzdDwvdGl0bGU%2bCiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vY2RuLnNpbXBsZWNzcy5vcmcvc2ltcGxlLm1pbi5jc3MiPgogICAgPHNjcmlwdD4KZnVuY3Rpb24gbWFrZVJlcXVlc3QoY29kZSwgdGV4dCkgewogIHJldHVybiB7CiAgICAnY29kZV9iNjQnOiBidG9hKGNvZGUpLAogICAgJ2t3YXJnc19iNjQnOiBidG9hKCd7InRleHQiOiAiJyArIHRleHQgKyAnIn0nKQogIH07Cn0KCmFzeW5jIGZ1bmN0aW9uIGdldEF1ZGlvKHVybCwgY29kZSwgdGV4dCwgb25DaHVuaywgb25Eb25lKSB7CiAgbGV0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7CiAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICB9LAogICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShtYWtlUmVxdWVzdChjb2RlLCB0ZXh0KSkKICB9KTsKICBpZiAoIXJlc3BvbnNlLm9rKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoYXdhaXQgcmVzcG9uc2UudGV4dCgpKTsKICB9CiAgY29uc3QgcmVhZGVyID0gcmVzcG9uc2UuYm9keS5nZXRSZWFkZXIoKTsKICByZWFkZXIucmVhZCgpLnRoZW4oKHsgZG9uZSwgY2h1bmsgfSkgPT4gewogICAgaWYgKGNodW5rKSB7CiAgICAgIG9uQ2h1bmsoY2h1bmspOwogICAgfQogICAgaWYgKGRvbmUpIHsKICAgICAgb25Eb25lKCk7CiAgICB9CiAgfSk7Cn0KCjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9Imh0dHBzOi8vY29kZS5qcXVlcnkuY29tL2pxdWVyeS0zLjcuMS5qcyIgaW50ZWdyaXR5PSJzaGEyNTYtZUtoYXlpOExFUXdwNE5LeE4rQ2ZDaCszcU9WVXRKbjNRTlowVGNpV0xQND0iIGNyb3Nzb3JpZ2luPSJhbm9ueW1vdXMiPjwvc2NyaXB0PgogICAgPHNjcmlwdD4KICAgICAgZnVuY3Rpb24gY29kZSgpIHsKICAgICAgICByZXR1cm4gJCgiI2NvZGUiKS50ZXh0KCk7CiAgICAgIH0KCiAgICAgIGZ1bmN0aW9uIHVybCgpIHsKICAgICAgICByZXR1cm4gJCgiI3VybCIpLnZhbCgpOyAgIAogICAgICB9CgogICAgICBmdW5jdGlvbiBiYXJrVGV4dCgpIHsKICAgICAgICByZXR1cm4gJCgnI2JhcmstaW5wdXQnKS52YWwoKTsKICAgICAgfQoKCiAgICAgIGZ1bmN0aW9uIGF1ZGlvVXJsKGNvZGUsIHRleHQpIHsKICAgICAgICBjb25zdCByZXF1ZXN0ID0gbWFrZVJlcXVlc3QoY29kZSwgdGV4dCk7CiAgICAgICAgcmV0dXJuIHVybCgpICsgJz8nICsgJC5wYXJhbShyZXF1ZXN0KTsKICAgICAgfQoKCiAgICAgIGZ1bmN0aW9uIGF1ZGlvQ2h1bmtIYW5kbGVyKGNodW5rKSB7CiAgICAgICAgY29uc29sZS5sb2coJ2F1ZGlvIGNodW5rJywgY2h1bmspOwogICAgICAgIHNldEF1ZGlvRGF0YVVSTChbY2h1bmtdKTsKICAgICAgfQoKICAgICAgZnVuY3Rpb24gYXVkaW9Eb25lSGFuZGxlcigpIHsKICAgICAgICBjb25zb2xlLmxvZygnYXVkaW8gZG9uZScpOwogICAgICB9CgogICAgICBmdW5jdGlvbiBoYW5kbGVTcGVhaygpIHsKICAgICAgICByZXR1cm4gZ2V0QXVkaW8odXJsKCksIGNvZGUoKSwgdGV4dCgpLCBhdWRpb0NodW5rSGFuZGxlciwgYXVkaW9Eb25lSGFuZGxlcik7CiAgICAgIH0KCiAgICAgIGNvbnN0IGF1ZGlvID0gbmV3IEF1ZGlvKCk7CgogICAgICBmdW5jdGlvbiBzZXRBdWRpb0RhdGFVUkwodmFsdWVzKSB7CiAgICAgICAgY29uc29sZS5sb2coJ3NldHRpbmcgYXVkaW8gZGF0YSB1cmwnLCB2YWx1ZXMpOwogICAgICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYih2YWx1ZXMsIHsgdHlwZTogJ2F1ZGlvL3dhdicgfSk7CiAgICAgICAgY29uc29sZS5sb2coJ3NldHRpbmcgYXVkaW8gZGF0YSB1cmwnLCB2YWx1ZXMsIGJsb2IpOwogICAgICAgIGF1ZGlvLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7CiAgICAgICAgYXVkaW8ucGxheSgpOwogICAgICB9CgogICAgICAkKGZ1bmN0aW9uKCkgewogICAgICAgIGNvbnN0IGF1ZGlvRGl2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Jhcmstb3V0cHV0Jyk7CiAgICAgICAgYXVkaW8uY29udHJvbHMgPSB0cnVlOwogICAgICAgIGF1ZGlvRGl2LmFwcGVuZENoaWxkKGF1ZGlvKTsKICAgICAgICBhdWRpby5hZGRFdmVudExpc3RlbmVyKCdsb2FkZWRkYXRhJywgKCkgPT4gewogICAgICAgICAgYXVkaW8ucGxheSgpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIDwvc2NyaXB0PgogIDwvaGVhZD4KICA8Ym9keT4KICAgIDxsYWJlbCBmb3I9InVybCI%2bRXhlYyBVUkw8L2xhYmVsPgogICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJ1cmwiIHZhbHVlPSJodHRwOi8vbG9jYWxob3N0Ojk4NzYvdGVzdC53YXYiPjwvaW5wdXQ%2bCiAgICA8bGFiZWwgZm9yPSJiYXJrLWlucHV0Ij5UZXh0IHRvIHNwZWFrPC9sYWJlbD4KICAgIDx0ZXh0YXJlYSBpZD0iYmFyay1pbnB1dCI%2bVGVzdCBzZW50ZW5jZS4gQW5kIGEgc2Vjb25kIHRlc3QuPC90ZXh0YXJlYT4KICAgIDxidXR0b24gb25jbGljaz0iaGFuZGxlU3BlYWsiPlNwZWFrPC9idXR0b24%2bCiAgICA8ZGl2IGlkPSJiYXJrLW91dHB1dCI%2bPC9kaXY%2bCiAgICA8cHJlPgogICAgICA8Y29kZSBpZD0iY29kZSIgY29udGVudGVkaXRhYmxlPSJ0cnVlIj4KZGVmIHJ1bihyZXF1ZXN0LCB0ZXh0OiBzdHIsIHNwZWFrZXI6IHN0ciA9ICJ2Mi9lbl9zcGVha2VyXzYiKToKICAgIGltcG9ydCBvcwogICAgaW1wb3J0IGxvZ2dpbmcKICAgIGltcG9ydCBpbwogICAgaW1wb3J0IG5sdGsKICAgIGZyb20gc2NpcHkuaW8ud2F2ZmlsZSBpbXBvcnQgd3JpdGUgYXMgd3JpdGVfd2F2CgogICAgb3MuZW52aXJvblsiQ1VEQV9WSVNJQkxFX0RFVklDRVMiXSA9ICIwIgogICAgb3MuZW52aXJvblsiU1VOT19VU0VfU01BTExfTU9ERUxTIl0gPSAiMCIKICAgIG9zLmVudmlyb25bIlNVTk9fT0ZGTE9BRF9DUFUiXSA9ICIwIgoKICAgIGZyb20gYmFyay5nZW5lcmF0aW9uIGltcG9ydCBnZW5lcmF0ZV90ZXh0X3NlbWFudGljLCBwcmVsb2FkX21vZGVscwogICAgZnJvbSBiYXJrIGltcG9ydCBnZW5lcmF0ZV9hdWRpbywgU0FNUExFX1JBVEUKCiAgICBwcmVsb2FkX21vZGVscygpCgogICAgZGVmIGdlbmVyYXRlKCk6CiAgICAgICAgc2VudGVuY2VzID0gbmx0ay5zZW50X3Rva2VuaXplKHRleHQucmVwbGFjZSgiXG4iLCAiICIpLnN0cmlwKCkpCiAgICAgICAgZm9yIGksIHNlbnRlbmNlIGluIGVudW1lcmF0ZShzZW50ZW5jZXMpOgogICAgICAgICAgICBsb2dnaW5nLmluZm8oCiAgICAgICAgICAgICAgICAiR2VuZXJhdGluZyBzZW50ZW5jZSAlZC8lZDogJXMiLCBpICsgMSwgbGVuKHNlbnRlbmNlcyksIHNlbnRlbmNlCiAgICAgICAgICAgICkKICAgICAgICAgICAgd2F2X2FycmF5ID0gZ2VuZXJhdGVfYXVkaW8oc2VudGVuY2UsIGhpc3RvcnlfcHJvbXB0PXNwZWFrZXIpCiAgICAgICAgICAgIGJ1ZiA9IGlvLkJ5dGVzSU8oKQogICAgICAgICAgICB3cml0ZV93YXYoYnVmLCBTQU1QTEVfUkFURSwgd2F2X2FycmF5KQogICAgICAgICAgICB5aWVsZCBidWYucmVhZCgpCgogICAgcmV0dXJuIGdlbmVyYXRlKCksIHsiQ29udGVudC1UeXBlIjogImF1ZGlvL21wZWcifQoKICAgICAgPC9jb2RlPgogICAgPC9wcmU%2bCiAgPC9ib2R5Pgo8L2h0bWw%2bCicnJykKICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgIHJldHVybiBzdHIoZSkK
#+end_export

Whew. We can open that ~owt~ URL in a browser and play with the web app, which itself makes calls to ~owt~ injecting the TTS logic.

***** Going Meta

That gets painful though - for iterative development, you want to save your code and hit refresh. This won't do anything here, since all code is snapshotted into the URL itself. However...

#+INCLUDE: "example/bark/bark_meta_curl.sh" src bash

#+BEGIN_SRC bash :exports both :results html
./example/bark/bark_meta_curl.sh http://localhost:9876
#+END_SRC

#+RESULTS:
#+begin_export html
curl -G --data-urlencode code_b64=ZGVmIHJ1bihfLCBiYXNlX3VybCk6CiAgaW1wb3J0IG9zCiAgaHRtbCA9IG9zLnBvcGVuKGYnYmFzaCAtYyAiJCguL2V4YW1wbGUvYmFyay9iYXJrX2NvbnN0cnVjdF9jdXJsLnNoIHtiYXNlX3VybH0pIicpLnJlYWQoKQogIHJldHVybiBodG1sCg== --data-urlencode kwargs_b64=eyJiYXNlX3VybCI6ICJodHRwOi8vbG9jYWxob3N0Ojk4NzYifQo= http://localhost:9876
#+end_export

Sweet - this will resolve to the meta-evaluator that always renders a fresh copy of the app each time.

#+BEGIN_SRC bash :exports both :results html
bash -c "$(./example/bark/bark_meta_curl.sh http://localhost:9876) -s -o /dev/null -w '%{url}'"
#+END_SRC

#+RESULTS:
#+begin_export html
http://localhost:9876/?code_b64=ZGVmIHJ1bihfLCBiYXNlX3VybCk6CiAgaW1wb3J0IG9zCiAgaHRtbCA9IG9zLnBvcGVuKGYnYmFzaCAtYyAiJCguL2V4YW1wbGUvYmFyay9iYXJrX2NvbnN0cnVjdF9jdXJsLnNoIHtiYXNlX3VybH0pIicpLnJlYWQoKQogIHJldHVybiBodG1sCg%3d%3d&kwargs_b64=eyJiYXNlX3VybCI6ICJodHRwOi8vbG9jYWxob3N0Ojk4NzYifQo%3d
#+end_export

**** Going Meta-Circular

Wait, no...

#+INCLUDE: "example/meta/bootstrap.sh" src bash

Oh no, no...

#+BEGIN_SRC bash :exports both :results html
source "example/meta/bootstrap.sh"

# Load up the nice simple echo example from earlier
CODE_B64=$(cat example/echo/echo.py | base64 -w 0)
KWARGS_B64=$(echo "{'name': 'owt-inside-owt'}" | base64 -w 0)

# Send a request that installs a full copy of owt and calls it with the payload code+kwargs
CMD=$(owtInOwt http://localhost 9876 "$CODE_B64" "$KWARGS_B64")
echo "Bootstrapping $CMD"
echo "Result:"
bash -c "$CMD"
#+END_SRC

#+RESULTS:
#+begin_export html
Bootstrapping curl -G --data-urlencode code_b64=ZGVmIHJ1bihyZXF1ZXN0LCBwYXlsb2FkX2NvZGVfYjY0LCBwYXlsb2FkX2t3YXJnc19iNjQpOgogIF9nbG9iYWxzID0geydfX25hbWVfXyc6IF9fbmFtZV9fKydfbmV3JywKICAgICAgICAgICAgICAnbmV3X3BvcnQnOiBhcmdzLnBvcnQgKyAxfQogIF9sb2NhbHMgPSB7fQogIHByaW50KGYnR29pbmcgb25lIGxldmVsIGRvd24gdG8gcG9ydCB7X2dsb2JhbHNbJ25ld19wb3J0J119Li4uJykKCiAgZXhlYygnJycKcHJpbnQoJ09uZSBsZXZlbCBkZWVwZXIsIGltcG9ydGluZyBvd3QnKQpmcm9tIG93dCBpbXBvcnQgKgpmcm9tIG11bHRpcHJvY2Vzc2luZyBpbXBvcnQgUHJvY2VzcwphcmdzLnBvcnQgPSBuZXdfcG9ydApzZXJ2ZXJfdGhyZWFkID0gUHJvY2Vzcyh0YXJnZXQ9bWFpbikKJycnLCBfZ2xvYmFscywgX2xvY2FscykKCiAgZGVmIGtpbGwoKToKICAgIGltcG9ydCB0aW1lCiAgICB0aW1lLnNsZWVwKDEwKQogICAgcHJpbnQoZidLaWxsaW5nIHNlcnZlciBvbiB7YXJncy5wb3J0fScpCiAgICBfbG9jYWxzWydzZXJ2ZXJfdGhyZWFkJ10udGVybWluYXRlKCkKICAgIHByaW50KGYnS2lsbGVkIHNlcnZlciBvbiB7YXJncy5wb3J0fScpCgogIGZyb20gbXVsdGlwcm9jZXNzaW5nIGltcG9ydCBQcm9jZXNzCiAgaW1wb3J0IHJlcXVlc3RzCiAgaW1wb3J0IHVybGxpYgoKICBfbG9jYWxzWydzZXJ2ZXJfdGhyZWFkJ10uc3RhcnQoKQogIFByb2Nlc3ModGFyZ2V0PWtpbGwpLnN0YXJ0KCkKICBib290c3RyYXBwZWRfdXJsID0gZiJodHRwOi8vbG9jYWxob3N0OntfZ2xvYmFsc1snbmV3X3BvcnQnXX0ve3JlcXVlc3QucGF0aH0/Y29kZV9iNjQ9e3VybGxpYi5wYXJzZS5xdW90ZV9wbHVzKHBheWxvYWRfY29kZV9iNjQpfSZrd2FyZ3NfYjY0PXt1cmxsaWIucGFyc2UucXVvdGVfcGx1cyhwYXlsb2FkX2t3YXJnc19iNjQpfSIKICBwcmludChib290c3RyYXBwZWRfdXJsKQogIHJlc3AgPSByZXF1ZXN0cy5nZXQoYm9vdHN0cmFwcGVkX3VybCkKICByZXR1cm4gcmVzcC5jb250ZW50Cg== --data-urlencode kwargs_b64=eyJwYXlsb2FkX2NvZGVfYjY0IjoiWkdWbUlISjFiaWh5WlhGMVpYTjBMQ0J1WVcxbFBVNXZibVVwT2dvZ0lDQWdJeUJNYjJGa2N5Qm1jbTl0SUdWcGRHaGxjaUIwYUdVZ1puSmxaUzEwWlhoMElIQmhkR2dnYjNJZ2RHaGxJSEpsY1hWbGMzUWdZbTlrZVFvZ0lDQWdhV1lnYm05MElHNWhiV1U2Q2lBZ0lDQWdJQ0FnYm1GdFpTQTlJSEpsY1hWbGMzUXVjR0YwYUM1emNHeHBkQ2dpTHlJcFd5MHhYUW9nSUNBZ2NtVjBkWEp1SUdZaVNHVnNiRzhzSUh0dVlXMWxmU0VpQ2c9PSIsICJwYXlsb2FkX2t3YXJnc19iNjQiOiAiZXlkdVlXMWxKem9nSjI5M2RDMXBibk5wWkdVdGIzZDBKMzBLIn0K http://localhost:9876
Result:
Hello, owt-inside-owt!
#+end_export

Oh no... but that would mean...

#+INCLUDE: "example/meta/bootstrap.py" src python

#+BEGIN_SRC bash :exports both :results html :noeval
METACODE_B64=$(cat example/meta/bootstrap.py | base64 -w 0)
function wrapOwt() {
  CODE_B64="$1"
  KWARGS_B64="$2"
  METAKWARGS_B64=$(base64 -w 0 <<< "{\"payload_code_b64\":\"$CODE_B64\", \"payload_kwargs_b64\": \"$KWARGS_B64\"}")
  echo "$METAKWARGS_B64"
}

N_LAYERS="10"
for layer in $(seq 1 $N_LAYERS); do
  CODE_B64=$(cat example/echo/echo.py | base64 -w 0)
  NAME="owt"
  for i in $(seq 1 $layer); do
      NAME="$NAME-inside-owt"
  done
  KWARGS_B64=$(echo "{\"name\": \"$NAME\"}" | base64 -w 0)
  METAKWARGS_B64=$(wrapOwt "$CODE_B64" "$KWARGS_B64")
  for i in seq 2 $layer; do
      METAKWARGS_B64=$(wrapOwt "$METACODE_B64" "$METAKWARGS_B64")
  done
  echo "layer: $NAME"
  CMD="curl -G --data-urlencode code_b64=$METACODE_B64 --data-urlencode kwargs_b64=$METAKWARGS_B64 http://localhost:9876"
  echo "Result: " $(bash -c "$CMD")
done
#+END_SRC

#+begin_export html
layer: owt-inside-owt
Result:  Hello, owt-inside-owt!
layer: owt-inside-owt-inside-owt
Result:  Hello, owt-inside-owt-inside-owt!
layer: owt-inside-owt-inside-owt-inside-owt
Result:  Hello, owt-inside-owt-inside-owt-inside-owt!
layer: owt-inside-owt-inside-owt-inside-owt-inside-owt
Result:  Hello, owt-inside-owt-inside-owt-inside-owt-inside-owt!
layer: owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt
Result:  Hello, owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt!
layer: owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt
Result:  Hello, owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt!
layer: owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt
Result:  Hello, owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt!
layer: owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt
Result:  Hello, owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt!
layer: owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt
Result:  Hello, owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt!
layer: owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt
Result:  Hello, owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt-inside-owt!
#+end_export

Hoo boy. How is Python a real language.
